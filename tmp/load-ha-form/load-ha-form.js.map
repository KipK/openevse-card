{"version":3,"file":"load-ha-form.js","sourceRoot":"","sources":["../../src/load-ha-form/load-ha-form.ts"],"names":[],"mappings":"AA+BA;;;;;GAKG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,IAAmB,EAAE;IAChD,4DAA4D;IAC5D,IACI,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC;QAC7B,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC;QAClC,cAAc,CAAC,GAAG,CAAC,gBAAgB,CAAC;QACpC,cAAc,CAAC,GAAG,CAAC,gBAAgB,CAAC;QACpC,cAAc,CAAC,GAAG,CAAC,kBAAkB,CAAC;QAEtC,OAAO;IAEX,oDAAoD;IACpD,MAAM,cAAc,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC;IAE3D,6DAA6D;IAC7D,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,wBAAwB,CAAyB,CAAC;IACrF,GAAG,CAAC,IAAI,GAAG;QACP,MAAM,EAAE;YACJ;gBACI,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,QAAQ;aAC3B;SACJ;KACJ,CAAC;IACF,GAAG,CAAC,aAAa,EAAE,CAAC;IAEpB,2BAA2B;IAC3B,MAAM,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IAE1C,0CAA0C;IAC1C,MAAM,cAAc,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;IAEpD,4EAA4E;IAC5E,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,iBAAiB,CAAkB,CAAC;IACvE,MAAM,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AACrD,CAAC,CAAC","sourcesContent":["/**\r\n * Type definitions for Home Assistant custom elements\r\n */\r\ninterface PartialPanelResolver extends HTMLElement {\r\n    hass: {\r\n        panels: Array<{\r\n            url_path: string;\r\n            component_name: string;\r\n        }>;\r\n    };\r\n    _updateRoutes(): void;\r\n    routerOptions: {\r\n        routes: Record<string, {\r\n            load(): Promise<unknown>;\r\n        }>;\r\n    };\r\n}\r\n\r\ninterface HaPanelConfig extends HTMLElement {\r\n    routerOptions: {\r\n        routes: {\r\n            automation: {\r\n                load(): Promise<unknown>;\r\n            };\r\n            [key: string]: {\r\n                load(): Promise<unknown>;\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\n/**\r\n * Utility function to asynchronously load Home Assistant form components\r\n * if they are not already registered in the custom elements registry.\r\n * \r\n * @returns Promise that resolves when all required components are loaded\r\n */\r\nexport const loadHaForm = async (): Promise<void> => {\r\n    // Check if all required custom elements are already defined\r\n    if (\r\n        customElements.get('ha-form') &&\r\n        customElements.get('ha-selector') &&\r\n        customElements.get('ha-textfield') &&\r\n        customElements.get('ha-icon-picker') &&\r\n        customElements.get('ha-icon-button') &&\r\n        customElements.get('ha-entity-picker')\r\n    )\r\n        return;\r\n\r\n    // Wait for the partial-panel-resolver to be defined\r\n    await customElements.whenDefined('partial-panel-resolver');\r\n\r\n    // Create and configure the panel resolver with proper typing\r\n    const ppr = document.createElement('partial-panel-resolver') as PartialPanelResolver;\r\n    ppr.hass = {\r\n        panels: [\r\n            {\r\n                url_path: 'tmp',\r\n                component_name: 'config',\r\n            },\r\n        ],\r\n    };\r\n    ppr._updateRoutes();\r\n\r\n    // Load the temporary route\r\n    await ppr.routerOptions.routes.tmp.load();\r\n\r\n    // Wait for the config panel to be defined\r\n    await customElements.whenDefined('ha-panel-config');\r\n\r\n    // Create the config panel and load automation components with proper typing\r\n    const cpr = document.createElement('ha-panel-config') as HaPanelConfig;\r\n    await cpr.routerOptions.routes.automation.load();\r\n};\r\n"]}