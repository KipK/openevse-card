{"version":3,"file":"custom-card-editor.js","sourceRoot":"","sources":["../src/custom-card-editor.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\r\nimport { HomeAssistant, CardConfig, OptionalEntity, TranslationDict, SchemaItem } from './types';\r\nimport { loadHaForm } from './load-ha-form/load-ha-form';\r\nimport { mainSchema, optionalEntitySchema } from './ha-form-schema';\r\nimport translations from './translations';\r\n\r\n// Editor for the card configuration\r\nclass CustomCardEditor extends LitElement {\r\n    static override get properties() {\r\n        return {\r\n            hass: { type: Object },\r\n            config: { type: Object },\r\n            _lang: { type: String },\r\n            _deviceIdChanged: { type: Boolean }\r\n        };\r\n    }\r\n\r\n    hass?: HomeAssistant;\r\n    config: CardConfig = {};\r\n    _lang?: string;\r\n    _deviceIdChanged: boolean = false;\r\n    _translations: TranslationDict = translations;\r\n    optionalEntities: OptionalEntity[] = [];\r\n    openEVSEEntities: Partial<CardConfig> = {};\r\n    deviceEntitiesLoaded: boolean = false;\r\n    _entityPickerKey: number = 0;\r\n\r\n    static override get styles() {\r\n        return css`\r\n      .form-container {\r\n          display: flex;\r\n          flex-direction: column;\r\n      }\r\n      .entities {\r\n          margin-top: 16px;\r\n      }\r\n      .entity-row {\r\n          padding: 8px;\r\n          margin-bottom: 8px;\r\n          border: 1px solid var(--divider-color);\r\n          border-radius: 4px;\r\n      }\r\n      .entity-actions {\r\n          display: flex;\r\n          justify-content: flex-end;\r\n          margin-top: 8px;\r\n      }\r\n      .add-entity {\r\n          margin-top: 16px;\r\n      }\r\n      .entity-section {\r\n          margin-top: 24px;\r\n          padding-top: 16px;\r\n          border-top: 1px solid var(--divider-color);\r\n      }\r\n      .entity-status {\r\n          margin: 8px 0;\r\n          padding: 8px;\r\n          border-radius: 4px;\r\n          background-color: var(--secondary-background-color);\r\n      }\r\n      .entity-status.success {\r\n          background-color: var(--success-color);\r\n          color: var(--text-primary-color);\r\n      }\r\n      .entity-status.warning {\r\n          background-color: var(--warning-color);\r\n          color: var(--text-primary-color);\r\n      }\r\n    `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.config = {};\r\n        this.optionalEntities = [];\r\n        this.openEVSEEntities = {};\r\n        this.deviceEntitiesLoaded = false;\r\n        this._translations = translations;\r\n        this._deviceIdChanged = false;\r\n    }\r\n\r\n    override async firstUpdated(): Promise<void> {\r\n        try {\r\n            await loadHaForm();\r\n        } catch (error) {\r\n            console.error('Error loading ha-form:', error);\r\n        }\r\n        this._lang = this.hass?.language || \"en\";\r\n    }\r\n\r\n    setConfig(config: CardConfig): void {\r\n        this.config = config;\r\n        this.optionalEntities = config.optional_entities || [];\r\n\r\n        // If device_id is already defined and we haven't loaded the entities yet\r\n        if (config.device_id && this.hass && !this.deviceEntitiesLoaded) {\r\n            this._loadDeviceEntities(config.device_id);\r\n        }\r\n    }\r\n\r\n    // Function to check if an entity is already configured\r\n    _isEntityConfigured(configKey: string): boolean {\r\n        return Boolean(this.config[configKey as keyof CardConfig] &&\r\n            (this.config[configKey as keyof CardConfig] as string).length > 0);\r\n    }\r\n\r\n    // Function to load entities associated with an OpenEVSE device\r\n    async _loadDeviceEntities(deviceId: string): Promise<void> {\r\n        if (!deviceId || !this.hass) return;\r\n\r\n        // Get all entities for this device\r\n        const deviceEntities: Record<string, string> = {};\r\n        const entityRegistry = Object.values(this.hass.entities || {});\r\n\r\n        // Filter entities belonging to this device\r\n        const deviceEntitiesList = entityRegistry.filter(\r\n            entity => entity.device_id === deviceId\r\n        );\r\n\r\n        // Attempt to match entities with required fields\r\n        // Modified to include entity type in the mapping\r\n        type EntityMapping = {\r\n            names: string[];\r\n            domains: string[];\r\n            preferredPattern: string;\r\n        };\r\n\r\n        const entityMappings: Record<string, EntityMapping> = {\r\n            override_entity: { names: [\"override_state\"], domains: [\"select\"], preferredPattern: \"select.openevse_override_state\" },\r\n            status_entity: { names: [\"station_status\"], domains: [\"sensor\"], preferredPattern: \"sensor.openevse_station_status\" },\r\n            power_entity: { names: [\"current_power_usage\"], domains: [\"sensor\"], preferredPattern: \"sensor.openevse_current_power_usage\" },\r\n            current_entity: { names: [\"charging_current\"], domains: [\"sensor\"], preferredPattern: \"sensor.openevse_charging_current\" },\r\n            vehicle_connected_entity: { names: [\"vehicle_connected\"], domains: [\"binary_sensor\"], preferredPattern: \"binary_sensor.openevse_vehicle_connected\" },\r\n            charging_status_entity: { names: [\"charging_status\"], domains: [\"sensor\"], preferredPattern: \"sensor.openevse_charging_status\" },\r\n            charge_rate_entity: { names: [\"charge_rate\"], domains: [\"number\"], preferredPattern: \"number.openevse_charge_rate\" },\r\n            session_energy_entity: { names: [\"usage_this_session\"], domains: [\"sensor\"], preferredPattern: \"sensor.openevse_usage_this_session\" },\r\n            time_elapsed_entity: { names: [\"charge_time_elapsed\"], domains: [\"sensor\"], preferredPattern: \"sensor.openevse_charge_time_elapsed\" }\r\n        };\r\n\r\n        // For each required entity type, find the best match\r\n        // but only if this entity is not already configured\r\n        for (const [configKey, mapping] of Object.entries(entityMappings)) {\r\n            // Do not replace already configured entities, unless the device_id has just changed\r\n            if (this._isEntityConfigured(configKey) && !this._deviceIdChanged) {\r\n                continue;\r\n            }\r\n\r\n            const { names, domains, preferredPattern } = mapping;\r\n\r\n            // First look for the preferred pattern\r\n            let matchedEntity = deviceEntitiesList.find(entity =>\r\n                entity.entity_id.toLowerCase() === preferredPattern.toLowerCase()\r\n            );\r\n\r\n            // If not found, search using names and domains\r\n            if (!matchedEntity) {\r\n                matchedEntity = deviceEntitiesList.find(entity => {\r\n                    const entityId = entity.entity_id.toLowerCase();\r\n                    const domain = entityId.split('.')[0];\r\n\r\n                    // Check if the domain matches\r\n                    if (!domains.includes(domain)) {\r\n                        return false;\r\n                    }\r\n\r\n                    // Check if the name matches any of the possible names\r\n                    return names.some(name =>\r\n                        entityId.includes(name.toLowerCase()) ||\r\n                        (entity.original_name && entity.original_name.toLowerCase().includes(name.toLowerCase()))\r\n                    );\r\n                });\r\n            }\r\n\r\n            if (matchedEntity) {\r\n                deviceEntities[configKey] = matchedEntity.entity_id;\r\n            }\r\n        }\r\n\r\n        this.openEVSEEntities = deviceEntities;\r\n        this.deviceEntitiesLoaded = true;\r\n\r\n        // Create an updated copy of the configuration\r\n        const updatedConfig = { ...this.config };\r\n\r\n        // Merge detected entities into the configuration\r\n        // whether the entity does not exist or the device_id has changed\r\n        for (const [key, value] of Object.entries(deviceEntities)) {\r\n            if (!this._isEntityConfigured(key) || this._deviceIdChanged) {\r\n                (updatedConfig as Record<keyof CardConfig, unknown>)[key as keyof CardConfig] = value;\r\n            }\r\n        }\r\n\r\n        // Reset the device_id change flag\r\n        this._deviceIdChanged = false;\r\n\r\n        // IMPORTANT: Update the local config object\r\n        this.config = updatedConfig;\r\n\r\n        // Trigger the config change event\r\n        this._fireConfigChanged(updatedConfig);\r\n\r\n        // Force component update\r\n        this.requestUpdate();\r\n    }\r\n\r\n    // Main configuration handling\r\n    _handleConfigChange(ev: CustomEvent): void {\r\n        const updatedConfig = ev.detail.value;\r\n\r\n        // If the device_id has changed, set the flag and load the corresponding entities\r\n        if (updatedConfig.device_id !== this.config.device_id) {\r\n            this._deviceIdChanged = true;\r\n            this.deviceEntitiesLoaded = false; // Reset to force reloading\r\n\r\n            // Update the entire config with all form values before loading entities\r\n            this.config = { ...this.config, ...updatedConfig };\r\n\r\n            this._loadDeviceEntities(updatedConfig.device_id);\r\n        } else {\r\n            // If other fields have changed, update the config normally\r\n            this._dispatchConfigChanged(updatedConfig);\r\n        }\r\n    }\r\n\r\n    _dispatchConfigChanged(updatedConfig: CardConfig): void {\r\n        const newConfig = {\r\n            ...updatedConfig,\r\n            optional_entities: this.optionalEntities,\r\n        };\r\n\r\n        // Update the local config object\r\n        this.config = newConfig;\r\n\r\n        this._fireConfigChanged(newConfig);\r\n    }\r\n\r\n    // Single function to trigger the config change event\r\n    _fireConfigChanged(newConfig: CardConfig): void {\r\n        this.dispatchEvent(\r\n            new CustomEvent(\"config-changed\", {\r\n                detail: { config: newConfig }\r\n            })\r\n        );\r\n    }\r\n\r\n    // Handling optional entities\r\n    _addOptionalEntity(ev: CustomEvent): void {\r\n        const entityId = (ev.target as HTMLInputElement)?.value;\r\n\r\n        if (entityId && !this.optionalEntities.some((e) => e.id === entityId)) {\r\n            // Get the default icon for the entity\r\n            const defaultIcon = typeof this.hass?.states[entityId]?.attributes?.icon === 'string' ? this.hass.states[entityId].attributes.icon : null;\r\n\r\n            this.optionalEntities = [\r\n                ...this.optionalEntities,\r\n                { id: entityId, name: null, icon: defaultIcon, value: null },\r\n            ];\r\n            this._fireConfigChanged({\r\n                ...this.config,\r\n                optional_entities: this.optionalEntities\r\n            });\r\n\r\n            this._entityPickerKey++;\r\n            this.requestUpdate();\r\n        }\r\n    }\r\n\r\n    _removeEntity(index: number): void {\r\n        this.optionalEntities = this.optionalEntities.filter((_, i) => i !== index);\r\n\r\n        this._fireConfigChanged({\r\n            ...this.config,\r\n            optional_entities: this.optionalEntities\r\n        });\r\n    }\r\n    _updateOptionalEntity(index: number, changedValues: Partial<OptionalEntity>): void {\r\n        // Create a copy of the current entity\r\n        const updatedEntity = { ...this.optionalEntities[index] };\r\n\r\n        // Type the keys properly\r\n        const keys = Object.keys(changedValues) as Array<keyof OptionalEntity>;\r\n\r\n        // Update each field, handling empty values specially\r\n        for (const key of keys) {\r\n            const value = changedValues[key];\r\n\r\n            if (value === \"\" || value === undefined) {\r\n                if (key === 'id') {\r\n                    updatedEntity.id = undefined;\r\n                } else if (key === 'name') {\r\n                    updatedEntity.name = null;\r\n                } else if (key === 'icon') {\r\n                    updatedEntity.icon = null;\r\n                } else if (key === 'value') {\r\n                    updatedEntity.value = null;\r\n                }\r\n            } else {\r\n                if (key === 'id') {\r\n                    updatedEntity.id = value as string | undefined;\r\n                } else if (key === 'name') {\r\n                    updatedEntity.name = value as string | null;\r\n                } else if (key === 'icon') {\r\n                    updatedEntity.icon = value as string | null;\r\n                } else if (key === 'value') {\r\n                    updatedEntity.value = value as string | null;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update the entities array\r\n        this.optionalEntities = this.optionalEntities.map((entity, i) =>\r\n            i === index ? updatedEntity : entity\r\n        );\r\n\r\n        // Update the configuration and fire the event\r\n        this._fireConfigChanged({\r\n            ...this.config,\r\n            optional_entities: this.optionalEntities\r\n        });\r\n    }\r\n\r\n    \r\n    // Check if all required entities have been found\r\n    _getMissingEntities(): string[] {\r\n        const requiredEntities = [\r\n            \"override_entity\", \"status_entity\", \"power_entity\", \"current_entity\",\r\n            \"vehicle_connected_entity\", \"charging_status_entity\", \"charge_rate_entity\",\r\n            \"session_energy_entity\", \"time_elapsed_entity\"\r\n        ];\r\n\r\n        // Check both in the configuration and in the detected entities\r\n        return requiredEntities.filter(entity => {\r\n            const isInConfig = this.config[entity as keyof CardConfig] &&\r\n                (this.config[entity as keyof CardConfig] as string).length > 0;\r\n            const isInDetected = this.openEVSEEntities[entity as keyof CardConfig] &&\r\n                (this.openEVSEEntities[entity as keyof CardConfig] as string).length > 0;\r\n            return !isInConfig && !isInDetected;\r\n        });\r\n    }\r\n\r\n    _t(key: string): string {\r\n        const lang = this._lang || \"en\";\r\n        return this._translations[lang]?.[key] ||\r\n            this._translations[\"en\"]?.[key] ||\r\n            key;\r\n    }\r\n\r\n    override render() {\r\n        if (!this.hass) {\r\n            return html``;\r\n        }\r\n\r\n        // Get entities for the selected device\r\n        const deviceEntities: Record<string, string[]> = {};\r\n        const allDeviceEntities: string[] = [];\r\n\r\n        if (this.config.device_id && this.hass.entities) {\r\n            const entityRegistry = Object.values(this.hass.entities);\r\n\r\n            // Filter entities by device ID\r\n            const deviceEntityList = entityRegistry.filter(entity =>\r\n                entity.device_id === this.config.device_id\r\n            );\r\n\r\n            // Group entities by domain\r\n            deviceEntityList.forEach(entity => {\r\n                const domain = entity.entity_id.split('.')[0];\r\n\r\n                if (!deviceEntities[domain]) {\r\n                    deviceEntities[domain] = [];\r\n                }\r\n\r\n                deviceEntities[domain].push(entity.entity_id);\r\n                allDeviceEntities.push(entity.entity_id);\r\n            });\r\n        }\r\n\r\n        // Create schema with entity lists\r\n        const schema = mainSchema(deviceEntities);\r\n        const optSchema = optionalEntitySchema(allDeviceEntities);\r\n        const missingEntities = this._getMissingEntities();\r\n\r\n        return html`\r\n      <!-- Auto-detection status -->\r\n      ${this.config.device_id ? html`\r\n          <div class=\"entity-section\">\r\n              <h3>${this._t(\"required_entities\")}</h3>\r\n              ${this.deviceEntitiesLoaded ? html`\r\n                  <div class=\"entity-status ${missingEntities.length > 0 ? 'warning' : 'success'}\">\r\n                      ${missingEntities.length === 0\r\n                        ? this._t(\"entity_auto_success\") + \"!\"\r\n                        : this._t(\"entity_auto_fail\") + \": \" + missingEntities.join(', ')\r\n                    }\r\n                  </div>\r\n              ` : html`\r\n                  <div class=\"entity-status\">\r\n                      ${this._t(\"entity_auto_loading\")}\r\n                  </div>\r\n              `}\r\n          </div>\r\n      ` : ''}\r\n      \r\n      <div class=\"form-container\">\r\n          ${!this.config.device_id ? html`\r\n          <ha-form\r\n              .hass=${this.hass}  \r\n              .data=${this.openEVSEEntities}\r\n              .schema=${[\r\n                    {\r\n                        name: \"device_id\",\r\n                        selector: { device: { integration: \"openevse\", manufacturer: \"OpenEVSE\" } },\r\n                        label: \"OpenEVSE Device\",\r\n                        helper_text: \"Select your OpenEVSE device to automatically populate all entities\",\r\n                        required: true\r\n                    }\r\n                ] as SchemaItem[]}\r\n              @value-changed=${this._handleConfigChange}\r\n          ></ha-form>\r\n          `: html`\r\n          <!-- Main configuration -->\r\n          <ha-form\r\n              .hass=${this.hass}\r\n              .data=${this.config}\r\n              .schema=${schema}\r\n              .computeLabel=${(schema: SchemaItem) => schema.label || schema.name}\r\n              .computeHelper=${(schema: SchemaItem) => schema.helper_text}\r\n              @value-changed=${this._handleConfigChange}\r\n          ></ha-form>\r\n          \r\n          <!-- Additional entities -->\r\n          <div class=\"entities\">\r\n              <h3>${this._t(\"additional entities\")}</h3>\r\n              \r\n              ${this.optionalEntities?.map((entity, index) => html`\r\n                  <div class=\"entity-row\">\r\n                      <ha-form\r\n                          .hass=${this.hass}\r\n                          .data=${entity}\r\n                          .schema=${optSchema}\r\n                          .computeLabel=${(schema: SchemaItem) => schema.label || schema.name}\r\n                          @value-changed=${(ev: CustomEvent) => this._updateOptionalEntity(index, ev.detail.value)}\r\n                      ></ha-form>\r\n                      \r\n                      <div class=\"entity-actions\">\r\n                          <ha-icon-button\r\n                              .path=${\"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\"}\r\n                              @click=${() => this._removeEntity(index)}\r\n                          ></ha-icon-button>\r\n                      </div>\r\n                  </div>\r\n              `)}\r\n              \r\n              <div class=\"add-entity\">\r\n                  <ha-entity-picker\r\n                      .hass=\"${this.hass}\"\r\n                      .includeDomains=${['sensor', 'binary_sensor']}\r\n                      .entityFilter=${(stateObj: { entity_id: string }) => {\r\n                    // If no device ID is selected, allow all entities\r\n                    if (!this.config.device_id) return true;\r\n\r\n                    // Find the entity in the entity registry\r\n                    const entityId = stateObj.entity_id;\r\n                    const entityRegistry = this.hass?.entities || {};\r\n\r\n                    // Check if the entity belongs to the selected device\r\n                    for (const regEntityId in entityRegistry) {\r\n                        const entity = entityRegistry[regEntityId];\r\n                        if (entity.entity_id === entityId && entity.device_id === this.config.device_id) {\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    return false;\r\n                }}\r\n                      @value-changed=\"${this._addOptionalEntity}\"\r\n                  ></ha-entity-picker>\r\n              </div>\r\n          </div>\r\n          `}\r\n      </div>\r\n    `;\r\n    }\r\n}\r\n\r\nexport { CustomCardEditor };\r\n"]}